/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 cassette.gltf 
Author: virgodmonkey (https://sketchfab.com/virgodmonkey)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/cassette-tape-21e23f5fe0714a98a1b76b4f6ae4eb9c
Title: Cassette Tape
*/

import React, {useRef, useState} from "react";
import {
    Html,
    OrbitControls,
    RoundedBox,
    Text,
    Text3D,
    useCursor,
    useGLTF,
} from "@react-three/drei";
import * as THREE from "three";
import {useFrame} from "@react-three/fiber";
import {useModelCursor} from "../../../hooks/useModelCursor";

// VHS tape, movie called "The Dev", about a man with keyboard,((((a developer with a keyboard as weapon  in scene)))), an (((unboxed))) tape, Horror Movie Poster,horror (theme), portray an extremely rich cinematic picture,(((Modern Movie Poster Style))),Movie Poster,<lora:horror 1:1>

export function Cassette(props) {
    const {nodes, materials} = useGLTF("models/cassette.gltf");
    window.cassete = props.modelRef;
    const frameRef = useRef();
    window.frame3 = frameRef;
    const lightRef = useRef();
    window.light6 = lightRef;

    const [isHovered, setIsHover] = useModelCursor();

    useFrame((state) => {
        if (!props.modelRef.current || !props.animate) return;

        const t = state.clock.getElapsedTime();
        if (props.isSelected) {
            props.modelRef.current.rotation.y = THREE.MathUtils.lerp(
                props.modelRef.current.rotation.y,
                0,
                0.1,
            );
            props.modelRef.current.rotation.x = THREE.MathUtils.lerp(
                props.modelRef.current.rotation.x,
                0,
                0.1,
            );
            props.modelRef.current.rotation.z = THREE.MathUtils.lerp(
                props.modelRef.current.rotation.z,
                0,
                0.1,
            );

            props.modelRef.current.position.z = THREE.MathUtils.lerp(
                props.modelRef.current.position.z,
                props.position[2] + 2.5,
                0.1,
            );
            props.modelRef.current.position.x = THREE.MathUtils.lerp(
                props.modelRef.current.position.x,
                0,
                0.1,
            );
            props.modelRef.current.position.y = THREE.MathUtils.lerp(
                props.modelRef.current.position.y,
                -2,
                0.1,
            );
        } else {
            props.modelRef.current.rotation.y = THREE.MathUtils.lerp(
                props.modelRef.current.rotation.y,
                Math.PI,
                0.1,
            );
            props.modelRef.current.rotation.x = THREE.MathUtils.lerp(
                props.modelRef.current.rotation.x,
                Math.cos(t / 2) / 20 - 0.1,
                0.1,
            );
            props.modelRef.current.rotation.z = THREE.MathUtils.lerp(
                props.modelRef.current.rotation.z,
                Math.sin(t / 8) / 20 - 0.1,
                0.1,
            );

            props.modelRef.current.position.z = THREE.MathUtils.lerp(
                props.modelRef.current.position.z,
                isHovered ? props.position[2] + 0.3 : props.position[2],
                0.1,
            );
            props.modelRef.current.position.y = THREE.MathUtils.lerp(
                props.modelRef.current.position.y,
                (-7 + props.delta + Math.sin(t / 2)) / 3,
                0.1,
            );
            props.modelRef.current.position.x = THREE.MathUtils.lerp(
                props.modelRef.current.position.x,
                props.position[0],
                0.1,
            );
        }
    });

    return (
        <group
            {...props}
            name={props.name}
            dispose={null}
            ref={props.modelRef}
            // position={[props.position[0], props.position[1], props.position[2] + hovered ? .2 : 0]}
            rotation={[0, Math.PI, 0]}
            onPointerOver={(e) => {
                e.stopPropagation();
                setIsHover(true);
            }}
            onPointerOut={(e) => {
                e.stopPropagation();
                setIsHover(false);
            }}
            onClick={(e) => {
                e.stopPropagation();
                props.onClick(props.name);
            }}
        >
            <pointLight
                position={[0, 1, -2]}
                intensity={10}
                color="#7FA4DC"
                ref={lightRef}
            />
            <pointLight
                position={[0, -1.4, -1.5]}
                intensity={3}
                color="#F24081"
                ref={lightRef}
            />
            <group>
                <group>
                    <group rotation={[Math.PI / 2, 0, 0]}>
                        <mesh
                            geometry={nodes.Object_6.geometry}
                            material={materials.tex_pack_MTL}
                        ></mesh>
                        <mesh
                            geometry={nodes.Object_7.geometry}
                            material={materials.white_plastic_MTL}
                        ></mesh>
                    </group>
                    <mesh
                        geometry={nodes.Object_4.geometry}
                        material={materials.label_MTL}
                        rotation={[Math.PI / 2, 0, 0]}
                        scale={[1, 1.01, 1]}
                    ></mesh>
                </group>
                <pointLight />
            </group>
            {/* <Html position={[1.1, 0.82, -0.12]} scale={2}>
                <div className="size-40 bg-orange-600 text-cyan-700">
                    aas as as shaa sh
                </div>
            </Html> */}
            <pointLight
                position={[0, 0.5, 1.3]}
                intensity={7}
                color="#7FA4DC"
                ref={lightRef}
            />
            <Text
                position={[1.1, 0.76, -0.1]}
                color="#1c1c1c"
                font="fonts/Tape.ttf"
                fontSize={0.75}
                rotation={[0, Math.PI, 0]}
            >
                {props.name}
            </Text>
            <Text
                position={[-0.6, 0.74, -0.12]}
                color="#1c1c1c"
                font="fonts/Tape.ttf"
                fontSize={0.36}
                rotation={[0, Math.PI, 0.05]}
            >
                {props.period}
            </Text>
            <Text
                position={[1.1, -0.4, -0.12]}
                color="#0C1C31"
                font="fonts/Tape.ttf"
                fontSize={0.3}
                rotation={[0, Math.PI, 0]}
                onClick={(e) => {
                    e.stopPropagation();
                    window.open(props.href, "_blank").focus();
                }}
            >
                {props.link}
            </Text>

            {/* <Text
                position={[1.12, -0.4, -0.12]}
                color="#0C1C31"
                // font="fonts/Tape.ttf"
                fontSize={0.3}
                rotation={[0, Math.PI, 0]}
                onClick={(e) => {
                    e.stopPropagation();
                    window.open(props.href, "_blank").focus();
                }}
            >
                â†’
            </Text> */}
            {/* <Text3D smooth={1} lineHeight={0.5} letterSpacing={-0.025}>
                Hello world!
                <meshNormalMaterial />
            </Text3D> */}
            <Text
                position={[0, 0.84, 0.1]}
                color="#1c1c1c"
                font="fonts/Tape.ttf"
                fontSize={0.22}
                lineHeight={0.96}
                rotation={[0, 0, 0.01]}
            >
                {props.desc}
            </Text>
            <Text
                position={[-0.4, -0.32, 0.1]}
                color="#1c1c1c"
                font="fonts/Tape.ttf"
                fontSize={0.22}
                rotation={[0, 0, 0]}
            >
                {props.skills}
            </Text>
        </group>
    );
}

useGLTF.preload("models/cassette.gltf");
